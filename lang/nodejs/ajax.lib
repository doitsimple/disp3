^^
deps.http = 1;
deps.https = 1;
deps.fs = 1;
deps.querystring = 1;
deps.url = 1;
deps.strlen = 1;
deps.extend1 = 1;
deps.extend = 1;
deps["form-data"] = 1
$$
function ajax(config, fn){
	if(!config.headers) config.headers = {};
	if(config.data){
		if(typeof config.data == "string"){
			config.headers["content-type"] = "text/plain";
		}else if(config.form){
			delete config.form;
			config.data = querystring.stringify(config.data);
			config.headers["content-type"] = "application/x-www-form-urlencoded";
		}else{
			if(config.json)
				delete config.json;
			config.data = JSON.stringify(config.data);
			config.headers["content-type"] = "application/json";
		}
		config.headers["content-length"] = strlen(config.data);		
	}else{
		config.headers["content-type"] = "text/plain";
	}
	if(config.bearer){
		config.headers["authorization"] = "Bearer " + config.bearer;
	}
	if(config.multipart){
		delete config.multipart;
		var form = new formData();
		for(var key in config.data){
			var c = config.data[key];
			if(typeof c == "object" && c.file)
				form.append(key, fs.createReadStream(c.file))
			else
				form.append(key, c)
		}
		delete config.data;
		config.headers["content-type"]= "multipart/form-data; boundary="+form._boundary;
		form.getLength(function(err, length){
			config.headers["content-length"]=length;
			config.stream = form;
			_ajax(config, fn);
		});
	}else{
		_ajax(config, fn);
	}
}
function _ajax(config, fn){
	if(!config.url.match(":\/")) config.url = "http://" + config.url;
	var urlParsed = url.parse(config.url);
	var options = {};
	append1(defaultOptions, {
		agent: false,
		rejectUnauthorized: false,
		headers: {}
	});
	extend(options, defaultOptions);
	extend(options, {
		host: urlParsed.hostname,
		path: urlParsed.path,
		method: config.method || "get"
	});
	if(urlParsed.port) options.port = urlParsed.port;		
	extend(options.headers, config.headers);
	if(!options.headers["content-type"].match("charset")){
		options.headers["content-type"]+= ";charset=utf-8";
	}
	var protocol = urlParsed.protocol || "http:";
	var req;
	if(protocol == "http:"){
		req = http.request(options);
	}else if(protocol == "https:"){
		req = https.request(options);
	}else{
		if(fn) fn("wrong protocol " + protocol);
		return;
	}
	if(config.data){
		req.write(config.data);
	}
	if(config.stream){
		config.stream.pipe(req);
	}
	req.once("response", function(res){
		if(config.returnStream)
			fn(null, res);
		else
			parseRes(res, fn);
	});

	req.on('error', function(error) {
		if(fn) fn(error);
	});
	req.end();
}
function parseRes(res, fn){
	var data = "";
	var isText;
	var ct = res.headers["content-type"];
	if(ct && ct.match("image")){
		isText = false;
		res.setEncoding("binary");
	}else{
		isText = true;
		res.setEncoding("utf8");
	}
	res.on('data', function (chunk) {
		data += chunk;
	});
	res.on('error', function (e) {
		if(fn) fn(e, null, {statusCode: res.statusCode, headers: res.headers});
	});			
	res.on('end',function(){
		if(isText)
			try {
				data = JSON.parse(data);
			}catch(e){
			}
		if(fn) fn(null, data, {statusCode: res.statusCode, headers: res.headers});
	});
}
