^^
deps.mongodb = 1;
deps.ObjectId = 1;
deps.isArray = 1;
deps.eachSync = 1;
deps.project = 1;
deps.bcryptEncode = 1;
var host, port, dbname, authStr, hostStr;
if(!argv.host) host = "127.0.0.1";
if(!argv.port) port = 27017;
if(argv.username && argv.password) authStr = username + ":" + password + "@";
else authStr = "";
if(!parent.db) parent.db = "main";
hostStr =  "mongodb://" + authStr + host + ":" + port + "/" + parent.db ;

$$
new function(){
	var self = this;
	^^if(parent.schemas){$$
	var colDef = ^^=$.stringify(parent.schemas)$$;
	^^}else{$$
	var colDef = {};
	^^}$$
	var colArray = Object.keys(colDef);
	var colCache = {};
	var colDataCache = {};
	var conn;
	var formatFuncs = {};
	self._format = function(doc, key, fields){
		
		if(doc.hasOwnProperty(key) && doc[key] == null){
		  delete doc[key];
			return;
		}
		if(doc.hasOwnProperty(key)){
			if(key.match(/_id$/)){
				try{
					doc[key] = ObjectId(doc[key]);
				}catch(e){
					doc[key] = "";
				}
				return;
			}
			if(key.match(/^\\$/)){
				var tmp = doc[key];
				if(typeof tmp == "object"){
					if(isArray(tmp)){
					}else{
						for(var key2 in tmp){
							self._format(tmp, key2, fields);
						}
						return;
					}
				}
			}
			var f = fields[key];
			if(!f) return;
			if(f.type == "int"){
				if(typeof doc[key] != "object"){
					doc[key] = parseInt(doc[key]);
				}
				return;
			}
			if(f.type == "float"){
				if(typeof doc[key] != "object"){
					doc[key] = parseFloat(doc[key]);
				}
				return;
			}
			if(f.type == "datetime"){
				if(typeof doc[key] != "object"){
					doc[key] = new Date(parseInt(doc[key])).getTime();
				}
				return;
			}
			if(f.type == "string"){
				if(typeof doc[key] != "object"){
					doc[key] = "" + doc[key];
				}
				return;
			}
			if(f.type == "password"){
				doc[key] = bcryptEncode(doc[key]);
				return;
			}
		}
	}
	self._formatInsert = function(doc, key, fields){
		var f = fields[key];	
		if(f.hasOwnProperty("default") && !doc.hasOwnProperty(key)){
			if(f.default == "now")
				doc[key] = new Date().getTime();
			else
				doc[key] = f.default;
		}
	}
	self.makeFormat = function(config, flag){
		if(flag == "insert"){
			return function(doc){
				if(!config || !doc) return;
				for(var key in config.fields){
					self._formatInsert(doc, key, config.fields);
					self._format(doc, key, config.fields);
				}
			}
		}
		return function(doc){
			if(!doc || !config) return;
			for(var key in doc){
				self._format(doc, key, config.fields);
			}
		}
	}
	self.format = function(oriname, doc, flag){
		if(flag) name = oriname + "@"+flag;
		else name = oriname;
		if(!formatFuncs[name]) formatFuncs[name] = self.makeFormat(colDef[oriname], flag);
		if(isArray(doc)){
			for(var i=0;i<doc.length;i++){
				formatFuncs[name](doc[i]);
			}
		}else{
			formatFuncs[name](doc);
		}
	}
	self.getCol = function(name){
		var col = colCache[name];
		if(!col){
			col = conn.collection(name);
			colCache[name] = col;
		}
		return col;
	}
	self.connect = function(fn){
		mongodb.MongoClient.connect("^^=hostStr$$", function(err, client) {
			if(err) return fn(err);
      conn = client;
			eachSync(colArray, function(e, cb){
				var colConfig = colDef[e];
^^if(global.dev){$$
				if(colConfig.seed){
					self.getCol(e).findOne(function(err, result){
						if(err) return cb(err);
						if(!result){
							self.inserts(e, colConfig.seed, cb);
						}else{
							cb();
						}
					});
				}else{
					cb();
				}
^^}else{$$
				cb();
^^}$$
			}, function(err){
			  fn(err, conn);
			});
		})
	}
	self.getCache = function(name, key, fn){
		if(!colDataCache[name]) colDataCache[name] = {};
		var cache = colDataCache[name];
		if(cache[key]){
			if(!cache[key].needUpdate) return fn(null, cache[key]);
			delete cache[key].needUpdate;
		}
		self.selectx(name, {$match: {_id: key}, $limit:1}, function(err, result){
			if(err) return fn(err);
			cache[key] = result[0];
			fn(null, cache[key]);
		});
	}
	self.updateCache = function(name, key){
		key = key.toString();
		if(!colDataCache[name]) return;
		var cache = colDataCache[name];
		if(!cache[key]) return;
		cache[key].needUpdate = 1;
	}
	self.aggr = function(name, arr, fn){
		self.getCol(name).aggregate(arr, fn);
	}
	self.selectx = function(name, op, fn){
		var aggrarr = [];
		self.format(name, op.$match);
		if(op.$match) aggrarr.push({$match: op.$match});
    if(op.$sort && Object.keys(op.$sort).length>0)
      aggrarr.push({$sort: op.$sort});
    if(op.$skip)
      aggrarr.push({$skip: parseInt(op.$skip)});
    if(op.$limit)
      aggrarr.push({$limit: parseInt(op.$limit)});
    if(op.$project && Object.keys(op.$project).length>0)
      aggrarr.push({$project: op.$project});
		self.aggr(name, aggrarr, function(err, result){
			if(err) return fn(err);
			if(op.$join){
				if(op.$join.cache){
					var joinConfig = op.$join;
					eachSync(result, function(row, cb){
						self.getCache(joinConfig.schema, row[joinConfig.idField], function(err, result2){
							if(err) return cb(err);
							project(result2, joinConfig.project, row);
							cb();
						});
					}, function(err){
						if(err) return fn(err);
						fn(null, result);
					});
				}else if(op.$join.cacheAll){					
//TODO
				}else{
//TODO
				}
			}else{
				if(name == "users"){
					for(var i in result){
						var row = result[i];
						var _id = row._id.toString();
						var r = parseInt(_id[_id.length-1], 16);
						if(row.meetuc)
							row.meetuc = parseInt(2*row.meetuc+r/3);
						if(row.talkuc)
							row.talkuc = parseInt(7*row.talkuc+r/2);
						if(row.likeuc)
							row.likeuc = parseInt(8*row.likeuc+r/1.5);						
					}
				}
				fn(null, result);
			}
		});
	},
	self.insert = function(name, doc, fn){
		self.format(name, doc, "insert");
		self.getCol(name).insertOne(doc, function(err, result){
			var id = doc._id;
			delete doc._id;
			if(err) return fn(err);
			fn(null, {insertedId: id});
		});
	}
	self.inserts = function(name, docs, fn){
		self.format(name, docs, "insert");
 		self.getCol(name).insertMany(docs, fn);
	}
	self.updatex = function(name, op, fn){

		self.format(name, op);
		var where = op.$match;
		self.format(name, where);
		delete op.$match;
		var method;
		if(op.$limit == 1)
			method = "updateOne"
		else
			method = "updateMany"
		delete op.$limit;
		self.getCol(name)[method](where, op, function(err, result){
      var rtn;
      if(result) rtn = result.result;
      else rtn = {n: 0};
			if(where._id)
				self.updateCache(name, where._id);
      fn(err, rtn);
    });
	}
	self.upsertx = function(name, op, fn){
		self.format(name, op);
		var where = op.$match;
		self.format(name, where);
		delete op.$match;
		var method;
		if(op.$limit == 1)
			method = "updateOne"
		else
			method = "updateMany"
		delete op.$limit;
		self.getCol(name)[method](where, op, {upsert:true}, function(err, result){
      var rtn;
      if(result) rtn = result.result;
      else rtn = {n: 0};
			if(where._id)
				self.updateCache(name, where._id);
      fn(err, rtn);
    });
	}
	self.sedatex = function(name, op, fn){
		self.format(name, op);
		var where = op.$match;
		self.format(name, where);
		delete op.$match;
		var method;
		if(op.$limit == 1)
			method = "updateOne"
		else
			method = "updateMany"
		delete op.$limit;
    self.getCol(name).findAndModify(where, [], op, function(err, doc){
      if(err) return fn(err);
      if(!doc) return fn(null, doc);
			if(where._id)
				self.updateCache(name, where._id);
      fn(null, doc.value);
    });
	}
	self.count = function(name, op, fn){
		self.format(name, op);
    self.getCol(name).count(op, fn);
	}
	self.each = function(name, fn, fnfinal){
    var c = self.getCol(name).find();
    var nextFn = function(err, doc){
      if(err) return fnfinal(err);
      if(!doc) return fnfinal();
      fn(doc, function(err2){
        if(err2) return fnfinal(err2);
        c.next(nextFn);
      });
    };
    c.next(nextFn);
  }
	self.colectx = function(name, op, fn){
    self.format(name, op);
		self.count(name, op.$match, function(err, count){
      if(err) return fn(err);
      self.selectx(name, op, function(err, data){
        if(err) return fn(err);
        fn(err, {
          data: data,
          count: count
        });
      });
    });
	}
	self.delete = function(name, where, fn){
		self.format(name, where);
    self.getCol(name).remove(where, fn);
	}
	self.drop = function(fn){
		conn.dropDatabase(fn);
	}
}