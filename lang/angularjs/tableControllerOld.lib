tableController = function tableController($scope, config) {
	if (!config.api) {
		console.error("no api");
		return
	}
	this.$scope = $scope;
	this.data = [];
	this.currPage = 1;
	this.totalPage = 0;
	this.perPage = 10; //the number of entries per page
	this.perScreen = 5; //the number of pages per screen
	this.api = config.api;
	this.where = {};
	^^if(config.query) {$$
		this.where = ^^=JSON.stringify(config.query.default) || {}$$;
	^^}$$
 	^^if (config.fields) {
	var datefields = [];
	for (var i in config.fields) {
		var t = config.fields[i].type;
		if (t == "date" || t == "datetime") {
			datefields.push(i);
		}
	}$$
	this.datefields = ^^=JSON.stringify(datefields) || []$$;
		console.log(this.datefields);
	^^}$$
	console.log(this.where);
	var self = this;
	self.sort = {};
	$scope.$watch(function() {
		return self.perPage;
	}, function(oldv, newv) {
		if (oldv && oldv != newv) {
			self.currPage = 1;
			self.refresh();
		}
	});
	$scope.$watchCollection(function() {
		return self.sort;
	}, function(oldv, newv) {
		if (oldv && oldv != newv) self.refresh();
	});
	self.adj = function() {
		var b = (self.perScreen - 1) / 2;
		var arr = [];
		var mid = self.currPage;
		if (mid <= b) mid = b + 1;
		if (mid > self.totalPage - b) mid = self.totalPage - b;
		for (var i = mid - b; i <= mid + b; i++) {
			if (i <= 0) continue;
			if (i > self.totalPage) continue;
			arr.push(i);
		}
		return arr;
	};
	self.gotoPage = function(page) {
		if (page == self.currPage) return;
		self.currPage = page;
		self.refresh();
	};
	self.gotoFirst = function() {
		self.gotoPage(1);
	}
	self.gotoLast = function() {
		self.gotoPage(self.totalPage);
	}
	self.changeSort = function(key, value) {
		var json = {};
		json[key] = value || -self.sort[key] || -1;
		self.sort = json;
	}
	self.refresh = $scope.refresh = function() {
		for (var i in self.datefields) {
			var f = self.datefields[i];
			delete(self.where[f]);
		}
		console.log("query:",self.where);
		requestx.postx(self.api, {			
		}, {
			where: self.where || {},
			op: {
				$sort: self.sort,
				$skip: (self.currPage - 1) * self.perPage,
				$limit: self.perPage
			}
		}, function(err, data) {
			console.log(data);
			self.data = data.data;
			self.count = data.count;
			self.totalPage = Math.ceil(data.count / self.perPage);
		});
	}
}
