tableController = function tableController($scope, config) {
	this.$scope = $scope;
	this.showsave = false;
//this.data = [];
	this.rawquerys = [];
	this.currPage = 1;
	this.totalPage = 0;
	this.perPage = 10; //the number of entries per page
	this.perPages = [5, 10, 20, 50, 100]; //the number of entries per page to select
	this.perScreen = 5; //the number of pages per screen
	this.api = config.api;
	var self = this;
	self.sort = config.sort || {};
	$scope.$watch(function() {
		return self.perPage;
	}, function(newv, oldv) {
		if (newv && oldv != newv) {
			self.currPage = 1;
			self.refresh();
		}
	});
	$scope.$watchCollection(function() {
		return self.sort;
	}, function(newv, oldv) {
		if (newv && oldv != newv) self.refresh();
	});
	self.adj = function() {
		var b = (self.perScreen - 1) / 2;
		var arr = [];
		var mid = self.currPage;
		if (mid <= b) mid = b + 1;
		if (mid > self.totalPage - b) mid = self.totalPage - b;
		for (var i = mid - b; i <= mid + b; i++) {
			if (i <= 0) continue;
			if (i > self.totalPage) continue;
			arr.push(i);
		}
		return arr;
	};
	self.gotoPage = function(page) {
		if (page == self.currPage) return;
		self.currPage = page;
		self.refresh();
	};
	self.gotoFirst = function() {
		self.gotoPage(1);
	}
	self.gotoLast = function() {
		self.gotoPage(self.totalPage);
	}
	self.changeSort = function(key, value) {
		var json = {};
		json[key] = value || -self.sort[key] || -1;
		self.sort = json;
	}
	self.refs = config.refs;
	self.fields = config.fields;
	self.fieldlist = config.fieldlist;
	self.project = {};
	for(var f in self.fields){
		self.project[f] = 1;
	}
	self.oplist = ["=",">","<",">=","<=","!=","in","notin","match","exists","notexists", "clear"];
	self.addRawQuery =function(by){
		if(!by){
			self.rawquerys.push({op:"=", by: ""});
		}else{
			self.rawquerys.push({op:"=", by: by});
		}
	}
	self.formatRawQuery = function(){
		self.where = {};
		self.by = {};
		if(config.where)
			for(var key in config.where)
				self.where[key] = config.where[key];
		for(var qi in self.rawquerys){
			var rq = self.rawquerys[qi];
			var fields, where;
			if(rq.by) {
				fields = config.refs[rq.by].fields;
				if(!self.by[rq.by]) self.by[rq.by] = {where:{},field:config.refs[rq.by].field};
				where = self.by[rq.by].where;
			}else{
				fields = self.fields;
				where = self.where;
			}
			if(!fields[rq.field]){
				alert(rq.field + "不存在");
				return 1;
			}
			if(!rq.field) continue;
			if(rq.op == "exists"){
				where[rq.field] = {$exists: true};
				continue;
			}
			if(rq.op == "notexists"){
				where[rq.field] = {$exists: false};
				continue;
			}					
			if(rq.op == "clear"){
				delete where[rq.field];
				continue;
			}
			if(!rq.hasOwnProperty("v"+rq.by+rq.field)) continue;
			var value = rq["v"+rq.by+rq.field];
			var type = fields[rq.field].type;
			if(type == "string")
				value = value.toString();
			else if(type == "int"){
				if(fields[rq.field].money){
					value = parseInt(value*100);
				}else{
					value = parseInt(value);
				}
			}
			else if(type == "float")
				value = parseFloat(value);
			else if(type == "date")
				value = new Date(value);
			else if(type == "datetime")
				value = new Date(value);
			if(rq.op == "="){
				where[rq.field] = value;
				continue;
			}
			if(where[rq.field] == "="){
				alert("=不能与其他操作符共存: "+rq.field);
				return 1;
			}
			if(!where[rq.field]) where[rq.field] = {};
			if(rq.op == ">"){
				where[rq.field].$gt = value;
			}
			if(rq.op == ">="){
				where[rq.field].$gte = value;
			}
			if(rq.op == "<"){
				where[rq.field].$lt = value;
			}
			if(rq.op == "<="){
				where[rq.field].$lte = value;
			}
			if(rq.op == "!="){
				where[rq.field].$ne = value;
			}
			if(rq.op == "in"){
				where[rq.field].$in = JSON.parse(value);
			}
			if(rq.op == "notin"){
				where[rq.field].$nin = JSON.parse(value);
			}
			if(rq.op == "match"){
				where[rq.field].$regex = value;
			}
		}
	}
	self.loadSave = function(orisave){
		var save;
		if(!orisave) save = {};
		else save = angular.copy(orisave);
		self.rawquerys = save.rawquerys || [];
		self.sort = save.sort || {};
		self.savename = save.name;
		self.refresh();
	}
	self.savePopover = 'save.html';
	self.savequerys = [];
	self.saveQuery = function(){			
		if(!self.savename){
			alert("请输入标识");
			return;
		}
		requestx.postx("/api/admin_save_query", {}, {
			schema: config.schema,
			data: {
				name: self.savename,
				rawquerys: self.rawquerys,
				sort: self.sort
			}
		}, function(err, data) {
			if(data.insertedId){
				self.savequerys.push({
					name: self.savename,
					rawquerys: self.rawquerys,
					sort: self.sort
				});
			}
		});
	}
	self.fetchSaveQuerys = function(){
		req.postBearer("/api/admin_get_querys", auth.gettoken(), {
			schema: config.schema
		}, function(err, data) {
			self.savequerys = data.data;
		});
	}
	self.refresh = function() {
		if(self.formatRawQuery()) return;
		requestx.postx(config.api, {}, {
			schema: config.schema,
			by: self.by,
			options: {
				$match: self.where,
				$project: self.project,
				$sort: self.sort,
				$skip: (self.currPage - 1) * self.perPage,
				$limit: self.perPage
			}
		}, function(err, result) {
			var data = result.data;
			if(!data){
				alert("error");
				console.log(result);
				return;
			}
			self.data = data.data;
			self.count = data.count;
			self.totalPage = Math.ceil(data.count / self.perPage);
			$scope.$apply();
		});
	};
	self.showinsertrow = false;
	self.showupdaterow = false;
	self.new = {};
	self.hiderow = function(){
		self.showinsertrow = false;
		self.showupdaterow = false;
	}
	self.showadd = function(){
		if(self.showupdaterow) self.showupdaterow = false;
		self.showinsertrow = !self.showinsertrow;
		if(self.showinsertrow){				
			self.new = {};
		}
	};
	self.showupdate = function(row){
		if(self.showinsertrow) self.showinsertrow = false;
		self.showupdaterow = !self.showupdaterow;
		if(self.showupdaterow){
			for(var key in row){
				if(key.match('pass')) continue;
				self.new[key] = row[key];
			}
		}
	}

	self.upsert = function(){
		var row = self.new;
		var _id = row._id;
		if(!_id){
			requestx.postx(config.api, {}, {
				method: "insert",
				schema: config.schema,
				by: self.by,
				options: self.new
			}, function(err, result) {
				var data = result.data;
				if(!data){
					alert("error");
					console.log(result);
					return;
				}
				self.hiderow();
				self.refresh();
				$scope.$apply();
			});
		}else{
			var id = row._id;
			var newrow = {};
			for(var key in row){
				if(key != "_id" && key[0] != "$")
					newrow[key] = row[key];
			}
			
			requestx.postx(config.api, {}, {
				method: "updatex",
				schema: config.schema,
				by: self.by,
				options: {
					$match: {_id: id},
					$set: newrow
				}
			}, function(err, result) {
				var data = result.data;
				if(!data){
					alert("error");
					console.log(result);
					return;
				}
				self.hiderow();
				self.refresh();
				$scope.$apply();
			});
		}
	}
	self.showdelete = function(id){
		self.fields.showrow_id = true;
		methods.openConfirmModal("确定要删除"+id+"吗", function(){
			access.delete(config.schema, id, function(){
				self.refresh();
				$scope.$apply();
			});
		});
	}
}
