tableController = function tableController($scope, config) {
	var name = config.name;
	this.fields = config.fields;
	this.$scope = $scope;
	this.api = config.api;
	var self = this;

	this.currPage = 1;
	this.totalPage = 0;
	this.perPage = 10; //the number of entries per page
	this.perPages = [5, 10, 20, 50, 100]; //the number of entries per page to select
	this.perScreen = 5; //the number of pages per screen
	self.sort = config.sort || {};
	$scope.$watch(function() {
		return self.perPage;
	}, function(newv, oldv) {
		if (newv && oldv != newv) {
			self.currPage = 1;
			self.refresh();
		}
	});
	$scope.$watchCollection(function() {
		return self.sort;
	}, function(newv, oldv) {
		if (newv && oldv != newv) self.refresh();
	});
	self.adj = function() {
		var b = (self.perScreen - 1) / 2;
		var arr = [];
		var mid = self.currPage;
		if (mid <= b) mid = b + 1;
		if (mid > self.totalPage - b) mid = self.totalPage - b;
		for (var i = mid - b; i <= mid + b; i++) {
			if (i <= 0) continue;
			if (i > self.totalPage) continue;
			arr.push(i);
		}
		return arr;
	};
	self.gotoPage = function(page) {
		if (page == self.currPage) return;
		self.currPage = page;
		self.refresh();
	};
	self.gotoFirst = function() {
		self.gotoPage(1);
	}
	self.gotoLast = function() {
		self.gotoPage(self.totalPage);
	}
	self.changeSort = function(key, value) {
		var json = {};
		json[key] = value || -self.sort[key] || -1;
		self.sort = json;
	}
	self.refresh = function(){
		var token = $.cookie("token");
		requestx.postx(config.api, {
			bearer: token
		}, {
			schema: config.schema,
			by: self.by,
			options: {
				$match: self.where,
				$project: self.project,
				$sort: self.sort,
				$skip: (self.currPage - 1) * self.perPage,
				$limit: self.perPage
			}
		}, function(err, result) {
			var data = result.data;
			if(!data){
				alert("error");
				console.log(result);
				return;
			}
			self.data = data.data;
			self.count = data.count;
			self.totalPage = Math.ceil(data.count / self.perPage);
			$scope.$apply();
		});
	};
	self.parser = function(json){
		var rtn = {};
		for(var key in json){
      if(key.match('pass')) continue;
			if(key.match(/time$/)){
				rtn[key] = new Date(parseInt(json[key]));
			}else{
				rtn[key] = json[key];
			}
    }
		return rtn;
	}
	self.formatter = function(json){
		var rtn = {};
		for(var key in json){
			if(key.match(/time$/))
				rtn[key] = new Date(json[key]).getTime();
			else
				rtn[key] = json[key];
    }
		return rtn;
	}
	self.upsert = function(){
		var row = self.formatter(self.new);
		var _id = row._id;
		var token = $.cookie("token");
		if(!_id){
			requestx.postx(config.api, {
				bearer: token
			}, {
				method: "insert",
				schema: config.schema,
				by: self.by,
				options: self.new
			}, function(err, result) {
				var data = result.data;
				if(!data){
					alert("error");
					console.log(result);
					return;
				}
				self.hideEditRow();
				self.refresh();
				$scope.$apply();
			});
		}else{
			var id = row._id;
			var newrow = {};
			for(var key in row){
				if(key != "_id" && key[0] != "$")
					newrow[key] = row[key];
			}
			requestx.postx(config.api, {
				bearer: token
			}, {
				method: "updatex",
				schema: config.schema,
				by: self.by,
				options: {
					$match: {_id: id},
					$set: newrow
				}
			}, function(err, result) {
				var data = result.data;
				if(!data){
					alert("error");
					console.log(result);
					return;
				}
				self.hideEditRow();
				self.refresh();
				$scope.$apply();
			});
		}
	}
	self.buffer = "no buffer";
	self.uploadFile = function(key){
		var token = $.cookie("token");
		requestx.postx(config.api+"/upload/"+key, {
			bearer: token,
			multipart: 1
		}, {
			buffer: self.buffer
		}, function(err, result) {
			var data = result.data;
			if(!data){
				alert("error");
				console.log(result);
				return;
			}
			console.log(result);
			self.new[key] = result.data;
			$scope.$apply();
		});
	}
	self.hideEditRow = function(){
		self.editRowShow = 0;
	}
	self.new = {};
	self.showEditRow = function(row){
		self.editRowShow = 1;
		self.new = self.parser(row);
	}
	self.showAddRow = function(row){
		self.editRowShow = 1;
		self.new = {};
	}
	self.showdelete = function(id){
		self.fields.showrow_id = true;
		methods.openConfirmModal("确定要删除"+id+"吗", function(){
			access.delete(config.schema, id, function(){
				self.refresh();
				$scope.$apply();
			});
		});
	}
	self.openModal = function(json){
		self.modal = json;
		$('#'+name+'Modal').modal();
	}
}
